import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.net.URI;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

@ExtendWith(MockitoExtension.class)
public class ConfigServiceClientTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private SmsPropertyManager smsPropertyManager;

    @Mock
    private KerberosJwtUtil kerberosJwtUtil;

    private ConfigServiceClient configServiceClient;

    @BeforeEach
    public void setUp() {
        configServiceClient = new ConfigServiceClient(restTemplate, smsPropertyManager, kerberosJwtUtil);
    }

    @Test
    public void getExternalApiMetadataTest() throws Exception {
        String donorSystem = "donor";
        Integer trackId = 1;
        URI uri = UriComponentsBuilder.fromHttpUrl("http://localhost/metadata/" + donorSystem).encode().build().toUri();

        when(smsPropertyManager.getMarketPlaceGetApiMetadataUrl()).thenReturn("http://localhost/metadata/");
        when(kerberosJwtUtil.generateKerberosJwt()).thenReturn("token");

        ApiMetadataListResponse mockResponse = new ApiMetadataListResponse();
        ResponseEntity<ApiMetadataListResponse> responseEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);
        when(restTemplate.exchange(eq(uri), eq(HttpMethod.GET), any(), eq(ApiMetadataListResponse.class))).thenReturn(responseEntity);

        List<ApiMetadataVo> result = configServiceClient.getExternalApiMetadata(donorSystem, trackId);

        assertNotNull(result);
    }

    @Test
    public void generateTrackIdTest() throws Exception {
        String reportingSystem = "reporting";
        Date asOfDate = new Date();
        Integer reportPeriodId = 1;
        URI uri = UriComponentsBuilder.fromHttpUrl("http://localhost/trackId").encode().build().toUri();

        when(smsPropertyManager.getMarketPlaceGetRequestId()).thenReturn("http://localhost/trackId");
        when(kerberosJwtUtil.generateKerberosJwt()).thenReturn("token");

        RegReportResponse mockResponse = new RegReportResponse();
        ResponseEntity<RegReportResponse> responseEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);
        when(restTemplate.exchange(eq(uri), eq(HttpMethod.POST), any(), eq(RegReportResponse.class))).thenReturn(responseEntity);

        Integer result = configServiceClient.generateTrackId(reportingSystem, asOfDate, reportPeriodId);

        assertNotNull(result);
    }

    @Test
    public void getRequestStatusTest() throws Exception {
        String reportingSystem = "reporting";
        Integer trackId = 1;
        URI uri = UriComponentsBuilder.fromHttpUrl("http://localhost/status/" + trackId).encode().build().toUri();

        when(smsPropertyManager.getMarketPlaceGetRequestStatus()).thenReturn("http://localhost/status/");
        when(kerberosJwtUtil.generateKerberosJwt()).thenReturn("token");

        EtlRequestStatusResponse mockResponse = new EtlRequestStatusResponse();
        ResponseEntity<EtlRequestStatusResponse> responseEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);
        when(restTemplate.exchange(eq(uri), eq(HttpMethod.GET), any(), eq(EtlRequestStatusResponse.class))).thenReturn(responseEntity);

        EtlRequestStatusResponse result = configServiceClient.getRequestStatus(reportingSystem, trackId);

        assertNotNull(result);
    }
}
