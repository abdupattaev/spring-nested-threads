import org.junit.jupiter.api.*;
import org.mockito.Mockito;

import org.springframework.http.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ApiCallServiceClientTest {

    private ApiCallServiceClient apiCallServiceClient;
    private RestServiceUtility mockRestServiceUtility;
    private SmsPropertyManager mockSmsPropertyManager;

    @BeforeEach
    void setUp () {
        mockRestServiceUtility = Mockito.mock(RestServiceUtility.class);
        mockSmsPropertyManager = Mockito.mock(SmsPropertyManager.class);
        apiCallServiceClient = new ApiCallServiceClient(mockRestServiceUtility, mockSmsPropertyManager);
    }

    @Test
    void fetchSinglePageData_Success() throws IOException, ApexException, RegReportingServiceException {
        int page = 1;
        int pageSize = 10;
        ApiMetadatavo apiMetadataVo = new ApiMetadatavo();
        String expectedBody = "Expected Body";
        ResponseEntity<String> mockResponseEntity = new ResponseEntity<>(expectedBody, HttpStatus.OK);

        when(mockRestServiceUtility.call(any(ApiMetadatavo.class))).thenReturn(mockResponseEntity);

        String result = apiCallServiceClient.fetchSinglePageData(page, pageSize, apiMetadataVo, 100);

        assertEquals(expectedBody, result);
        verify(mockRestServiceUtility, times(1)).call(apiMetadataVo);
    }

    @Test
    void fetchSinglePageData_Error() throws IOException, ApexException, RegReportingServiceException {
        int page = 1;
        int pageSize = 10;
        ApiMetadatavo apiMetadataVo = new ApiMetadatavo();

        when(mockRestServiceUtility.call(any(ApiMetadatavo.class)))
            .thenThrow(new RuntimeException("Test Exception"));

        assertThrows(RegReportingServiceException.class, () ->
            apiCallServiceClient.fetchSinglePageData(page, pageSize, apiMetadataVo, 100));
    }
}
